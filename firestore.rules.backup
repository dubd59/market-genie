rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Tenants - consolidated rules for tenant access
    match /tenants/{tenantId} {
      // Allow super admin (dubdproducts@gmail.com) full access to all tenants
      allow read, write, create: if request.auth != null && 
        request.auth.token.email == 'dubdproducts@gmail.com';
      
      // Allow read/write if user owns the tenant (existing tenant)
      allow read, write: if request.auth != null && 
        resource != null && resource.data.ownerId == request.auth.uid;
      
      // Allow creation if the new tenant is owned by the current user
      allow create: if request.auth != null && 
        request.resource.data.ownerId == request.auth.uid;
      
      // Allow read operations for authenticated users to check their own tenants
      allow read: if request.auth != null;
      
      // Tenant sub-collections (leads, campaigns, etc.)
      match /{subcollection}/{document} {
        // Super admin access
        allow read, write, create: if request.auth != null && 
          request.auth.token.email == 'dubdproducts@gmail.com';
        
        // Users can only access data within their own tenant
        allow read, write, create: if request.auth != null && 
          exists(/databases/$(database)/documents/tenants/$(tenantId)) &&
          get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerId == request.auth.uid;
          
        // Allow nested documents within tenant subcollections
        match /{document=**} {
          // Super admin access
          allow read, write, create: if request.auth != null && 
            request.auth.token.email == 'dubdproducts@gmail.com';
          
          // Regular user access
          allow read, write, create: if request.auth != null && 
            exists(/databases/$(database)/documents/tenants/$(tenantId)) &&
            get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerId == request.auth.uid;
        }
      }
    }
    
    // Public pricing and landing page data (if needed)
    match /public/{document} {
      allow read: if true;
    }
    
    // Analytics and usage tracking (tenant-specific)
    match /analytics/{tenantId}/{document=**} {
      allow read, write: if request.auth != null && 
        get(/databases/$(database)/documents/tenants/$(tenantId)).data.ownerId == request.auth.uid;
    }
    
    // Health check collection for stability monitoring
    match /_health/{document} {
      allow read, write, create: if request.auth != null;
    }
    
    // User data (API keys, budget settings, preferences, etc.)
    match /userData/{userDataId} {
      // Allow users to access only their own data (userDataId format: userId_dataType)
      allow read, write, create: if request.auth != null && 
        userDataId.matches(request.auth.uid + '_.*');
    }
    
    // Legacy collection patterns for backwards compatibility
    match /crm_contacts/{document} {
      allow read, write, create: if request.auth != null;
    }
    
    // MarketGenie secure collections - NEW PREFIXED COLLECTIONS
    match /MarketGenie_tenants/{tenantId} {
      // Allow super admin (dubdproducts@gmail.com) full access to all tenants
      allow read, write, create: if request.auth != null && 
        request.auth.token.email == 'dubdproducts@gmail.com';
      
      // Allow read/write if user owns the tenant
      allow read, write: if request.auth != null && 
        resource != null && resource.data.ownerId == request.auth.uid;
      
      // Allow creation if the new tenant is owned by the current user
      allow create: if request.auth != null && 
        request.resource.data.ownerId == request.auth.uid;
      
      // Allow read operations for authenticated users to check their own tenants
      allow read: if request.auth != null;
    }
    
    match /MarketGenie_users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    match /MarketGenie_userData/{userDataId} {
      // Allow users to access only their own data (userDataId format: userId_dataType)
      allow read, write, create: if request.auth != null && 
        userDataId.matches(request.auth.uid + '_.*');
        
      // Subcollections for component data
      match /components/{componentName} {
        allow read, write, create: if request.auth != null && 
          userDataId.matches(request.auth.uid + '_.*');
      }
    }

    // User-specific campaigns (format: userId_campaigns)
    match /{userCampaignCollection}/{document} {
      allow read, write, create: if request.auth != null && 
        userCampaignCollection.matches(request.auth.uid + '_campaigns');
    }
    
    // CRM collections
    match /CRM_deals/{document} {
      allow read, write, create: if request.auth != null;
    }
    
    match /CRM_funnels/{document} {
      allow read, write, create: if request.auth != null;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
