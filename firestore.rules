rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // MULTI-TENANT SECURITY RULES
    // CRITICAL: These rules enforce absolute tenant isolation
    // NO data sharing between tenants is allowed
    
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserTenantId() {
      return request.auth.token.tenantId;
    }
    
    function getUserTenantIdFromClaims() {
      return request.auth.token.tenantId;
    }
    
    function belongsToUserTenant(tenantId) {
      return isAuthenticated() && getUserTenantId() == tenantId;
    }
    
    function isDocumentOwner(resource) {
      return isAuthenticated() && 
             resource.data.tenantId == getUserTenantId();
    }
    
    function isValidTenantData() {
      return 'tenantId' in request.resource.data &&
             request.resource.data.tenantId == getUserTenantId();
    }

    function isSuperAdmin() {
      return isAuthenticated() && 
             request.auth.token.email == 'dubdproducts@gmail.com';
    }

    // USERS COLLECTION
    // Users can only access their own user document or users in their tenant
    match /users/{userId} {
      allow read, write: if isAuthenticated() && 
                            (request.auth.uid == userId || 
                             (resource != null && isDocumentOwner(resource)));
      allow create: if isAuthenticated() && 
                       (request.auth.uid == userId || isValidTenantData());
    }

    // TENANTS COLLECTION
    // Users can only read/write their own tenant data
    // Super admin has full access
    match /tenants/{tenantId} {
      allow read, write: if isSuperAdmin() ||
                            (isAuthenticated() && belongsToUserTenant(tenantId)) ||
                            (isAuthenticated() && tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com');
      allow create: if isSuperAdmin() ||
                       (isAuthenticated() && isValidTenantData());
      allow list: if isSuperAdmin() ||
                     (isAuthenticated() && request.auth.token.email == 'dubdproducts@gmail.com');
    }

    // MARKETGENIE_TENANTS COLLECTION
    // Main tenant collection with full isolation
    // Special access for founder account
    match /MarketGenie_tenants/{tenantId} {
      allow read, write: if isSuperAdmin() ||
                            (isAuthenticated() && resource.data.ownerId == request.auth.uid) ||
                            (isAuthenticated() && tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com');
      allow create: if isSuperAdmin() ||
                       (isAuthenticated() && request.resource.data.ownerId == request.auth.uid) ||
                       (isAuthenticated() && request.resource.data.id == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com');
      allow list: if isSuperAdmin() ||
                     (isAuthenticated() && request.auth.token.email == 'dubdproducts@gmail.com') ||
                     isAuthenticated();
      
      // SUBCOLLECTIONS FOR TENANT-SPECIFIC DATA
      // Leads subcollection
      match /leads/{leadId} {
        allow read, write, delete: if isAuthenticated() && 
                                      (isSuperAdmin() || 
                                       request.auth.token.tenantId == tenantId);
        allow create: if isAuthenticated() && 
                         (isSuperAdmin() || 
                          request.auth.token.tenantId == tenantId);
      }
      
      // Campaigns subcollection
      match /campaigns/{campaignId} {
        allow read, write, delete: if isAuthenticated() && 
                                      (isSuperAdmin() || 
                                       request.auth.token.tenantId == tenantId);
        allow create: if isAuthenticated() && 
                         (isSuperAdmin() || 
                          request.auth.token.tenantId == tenantId);
      }
      
      // Analytics subcollection
      match /analytics/{analyticId} {
        allow read, write, delete: if isAuthenticated() && 
                                      (isSuperAdmin() || 
                                       request.auth.token.tenantId == tenantId);
        allow create: if isAuthenticated() && 
                         (isSuperAdmin() || 
                          request.auth.token.tenantId == tenantId);
      }
      
      // Other tenant-specific subcollections catch-all
      match /{subcollection}/{document=**} {
        allow read, write, delete: if isAuthenticated() && 
                                      (isSuperAdmin() || 
                                       request.auth.token.tenantId == tenantId);
        allow create: if isAuthenticated() && 
                         (isSuperAdmin() || 
                          request.auth.token.tenantId == tenantId);
      }
    }

    // DEALS COLLECTION  
    // Complete tenant isolation for all deal operations
    match /deals/{dealId} {
      allow read, write: if isAuthenticated() && 
                            (isDocumentOwner(resource) || 
                             (resource.data.tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com'));
      allow create: if isAuthenticated() && 
                       (isValidTenantData() || 
                        (request.resource.data.tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com'));
      allow list: if isAuthenticated() && 
                     (request.auth.token.email == 'dubdproducts@gmail.com' || isSuperAdmin());
    }

    // CONTACTS COLLECTION
    // Tenant-specific contact access only
    match /contacts/{contactId} {
      allow read, write: if isAuthenticated() && 
                            (isDocumentOwner(resource) || 
                             (resource.data.tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com'));
      allow create: if isAuthenticated() && 
                       (isValidTenantData() || 
                        (request.resource.data.tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com'));
      allow list: if isAuthenticated() && 
                     (request.auth.token.email == 'dubdproducts@gmail.com' || isSuperAdmin());
    }

    // CAMPAIGNS COLLECTION
    // Marketing campaigns isolated by tenant
    match /campaigns/{campaignId} {
      allow read, write: if isAuthenticated() && 
                            (isDocumentOwner(resource) || 
                             (resource.data.tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com'));
      allow create: if isAuthenticated() && 
                       (isValidTenantData() || 
                        (request.resource.data.tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com'));
      allow list: if isAuthenticated() && 
                     (request.auth.token.email == 'dubdproducts@gmail.com' || isSuperAdmin());
    }

    // COMPANIES COLLECTION
    // Company data isolated by tenant
    match /companies/{companyId} {
      allow read, write: if isAuthenticated() && 
                            (isDocumentOwner(resource) || 
                             (resource.data.tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com'));
      allow create: if isAuthenticated() && 
                       (isValidTenantData() || 
                        (request.resource.data.tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com'));
      allow list: if isAuthenticated() && 
                     (request.auth.token.email == 'dubdproducts@gmail.com' || isSuperAdmin());
    }

    // TASKS COLLECTION
    // Tasks isolated by tenant
    match /tasks/{taskId} {
      allow read, write: if isAuthenticated() && 
                            (isDocumentOwner(resource) || 
                             (resource.data.tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com'));
      allow create: if isAuthenticated() && 
                       (isValidTenantData() || 
                        (request.resource.data.tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com'));
      allow list: if isAuthenticated() && 
                     (request.auth.token.email == 'dubdproducts@gmail.com' || isSuperAdmin());
    }

    // PIPELINES COLLECTION
    // Sales pipelines per tenant only
    match /pipelines/{pipelineId} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // ACTIVITIES COLLECTION
    // Activity logs isolated by tenant
    match /activities/{activityId} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // SETTINGS COLLECTION
    // Tenant-specific settings only
    match /settings/{settingId} {
      allow read, write: if isAuthenticated() && 
                            (isDocumentOwner(resource) || 
                             (resource.data.tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com'));
      allow create: if isAuthenticated() && 
                       (isValidTenantData() || 
                        (request.resource.data.tenantId == 'founder-tenant' && request.auth.token.email == 'dubdproducts@gmail.com'));
      allow list: if isAuthenticated() && 
                     (request.auth.token.email == 'dubdproducts@gmail.com' || isSuperAdmin());
    }

    // INTEGRATIONS COLLECTION
    // API keys and integrations per tenant
    match /integrations/{integrationId} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // WORKFLOWS COLLECTION
    // Automation workflows per tenant
    match /workflows/{workflowId} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // BACKUP RULES FOR LEGACY COLLECTIONS
    // Support for existing data structure during migration
    match /todos/{document=**} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    match /tasks/{document=**} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // SETTINGS AND BUDGET COLLECTIONS  
    // User-specific settings and budget data
    match /settings/{settingId} {
      allow read, write: if isAuthenticated() && 
                            (request.auth.token.email == 'dubdproducts@gmail.com' || 
                             isSuperAdmin() ||
                             (resource != null && resource.data.tenantId == 'founder-tenant'));
      allow create: if isAuthenticated() && 
                       (request.auth.token.email == 'dubdproducts@gmail.com' || 
                        isSuperAdmin());
      allow list: if isAuthenticated() && 
                     (request.auth.token.email == 'dubdproducts@gmail.com' || 
                      isSuperAdmin());
    }

    // API KEYS COLLECTION
    // Store API keys securely per tenant
    match /apiKeys/{keyId} {
      allow read, write: if isAuthenticated() && 
                            (request.auth.token.email == 'dubdproducts@gmail.com' || 
                             isSuperAdmin() ||
                             (resource != null && resource.data.tenantId == 'founder-tenant'));
      allow create: if isAuthenticated() && 
                       (request.auth.token.email == 'dubdproducts@gmail.com' || 
                        isSuperAdmin());
      allow list: if isAuthenticated() && 
                     (request.auth.token.email == 'dubdproducts@gmail.com' || 
                      isSuperAdmin());
    }

    // WHITELABEL APPLICATIONS COLLECTION
    // Lifetime plan users can create White Label applications
    match /MarketGenie_whitelabel_applications/{applicationId} {
      allow read, write: if isSuperAdmin() ||
                            (isAuthenticated() && resource.data.applicantId == getUserTenantId()) ||
                            (isAuthenticated() && resource.data.applicantEmail == request.auth.token.email);
      allow create: if isAuthenticated() && 
                       (request.resource.data.applicantId == getUserTenantId() || 
                        request.resource.data.applicantEmail == request.auth.token.email);
      allow list: if isSuperAdmin() ||
                     (isAuthenticated() && request.auth.token.email == 'dubdproducts@gmail.com');
    }

    // WHITELABEL PARTNERS COLLECTION  
    // Lifetime plan users can create and manage their White Label partner records
    match /MarketGenie_whitelabel_partners/{partnerId} {
      allow read: if isSuperAdmin() ||
                     (isAuthenticated() && partnerId == request.auth.uid) ||
                     (isAuthenticated() && resource != null && resource.data.userId == request.auth.uid) ||
                     (isAuthenticated() && resource != null && resource.data.contactEmail == request.auth.token.email);
      allow write: if isSuperAdmin() ||
                      (isAuthenticated() && partnerId == request.auth.uid) ||
                      (isAuthenticated() && resource != null && resource.data.userId == request.auth.uid) ||
                      (isAuthenticated() && resource != null && resource.data.contactEmail == request.auth.token.email);
      allow create: if isAuthenticated() && 
                       (partnerId == request.auth.uid ||
                        request.resource.data.userId == request.auth.uid || 
                        request.resource.data.contactEmail == request.auth.token.email);
      allow list: if isSuperAdmin() ||
                     (isAuthenticated() && request.auth.token.email == 'dubdproducts@gmail.com');
    }

    // CATCH-ALL RULE FOR AUTHENTICATED FOUNDER ACCOUNT
    // Allow founder account access to any collection as fallback
    match /{collection}/{document=**} {
      allow read, write, create, delete: if isAuthenticated() && 
                                            request.auth.token.email == 'dubdproducts@gmail.com';
    }
  }
}