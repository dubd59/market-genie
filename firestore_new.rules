rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // MULTI-TENANT SECURITY RULES
    // CRITICAL: These rules enforce absolute tenant isolation
    // NO data sharing between tenants is allowed
    
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserTenantId() {
      return request.auth.token.tenantId;
    }
    
    function belongsToUserTenant(tenantId) {
      return isAuthenticated() && getUserTenantId() == tenantId;
    }
    
    function isDocumentOwner(resource) {
      return isAuthenticated() && 
             resource.data.tenantId == getUserTenantId();
    }
    
    function isValidTenantData() {
      return 'tenantId' in request.resource.data &&
             request.resource.data.tenantId == getUserTenantId();
    }

    function isSuperAdmin() {
      return isAuthenticated() && 
             request.auth.token.email == 'dubdproducts@gmail.com';
    }

    // USERS COLLECTION
    // Users can only access their own user document or users in their tenant
    match /users/{userId} {
      allow read, write: if isAuthenticated() && 
                            (request.auth.uid == userId || 
                             (resource != null && isDocumentOwner(resource)));
      allow create: if isAuthenticated() && 
                       (request.auth.uid == userId || isValidTenantData());
    }

    // TENANTS COLLECTION
    // Users can only read/write their own tenant data
    // Super admin has full access
    match /tenants/{tenantId} {
      allow read, write: if isSuperAdmin() ||
                            (isAuthenticated() && belongsToUserTenant(tenantId));
      allow create: if isSuperAdmin() ||
                       (isAuthenticated() && isValidTenantData());
    }

    // DEALS COLLECTION  
    // Complete tenant isolation for all deal operations
    match /deals/{dealId} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // CONTACTS COLLECTION
    // Tenant-specific contact access only
    match /contacts/{contactId} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // CAMPAIGNS COLLECTION
    // Marketing campaigns isolated by tenant
    match /campaigns/{campaignId} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // PIPELINES COLLECTION
    // Sales pipelines per tenant only
    match /pipelines/{pipelineId} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // ACTIVITIES COLLECTION
    // Activity logs isolated by tenant
    match /activities/{activityId} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // SETTINGS COLLECTION
    // Tenant-specific settings only
    match /settings/{settingId} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // INTEGRATIONS COLLECTION
    // API keys and integrations per tenant
    match /integrations/{integrationId} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // WORKFLOWS COLLECTION
    // Automation workflows per tenant
    match /workflows/{workflowId} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // BACKUP RULES FOR LEGACY COLLECTIONS
    // Support for existing data structure during migration
    match /todos/{document=**} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    match /tasks/{document=**} {
      allow read, write: if isAuthenticated() && 
                            isDocumentOwner(resource);
      allow create: if isAuthenticated() && 
                       isValidTenantData();
    }

    // DENY ALL OTHER COLLECTIONS
    // Explicit deny for any collection not specifically allowed
    match /{document=**} {
      allow read, write: if false;
    }
  }
}